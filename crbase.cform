{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Creates backing Lambda functions for Custom Resources",
  "Parameters": {
    "CRVersioningStackName" : {
      "Description" : "The name of the stack containing the lambda functions for versioning",
      "Type" : "String",
      "Default" : "CRVersioning-YYYYMMDD"
    },
    "LoggingTTL" : {
        "Default" : 7,
        "Description" : "The TTL in days for the logs generated by the Lambda functions",
        "Type" : "Number",
        "AllowedValues" : [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
    }
  },
  "Resources": {
    "S3UrlSplitterHasher" : {
      "Type" : "Custom::CodeHasher",
      "Properties" : {
        "ServiceToken": { "Fn::ImportValue" : { "Fn::Sub" : "${CRVersioningStackName}-CodeHash" } },
        "ZipFile": {
          "Fn::Join": [
            "\n",
            [
              "from botocore.vendored import requests",
              "from hashlib import sha512",
              "from json import dumps",
              "from urlparse import urlparse, parse_qs",
              "def send(event, context, response_status, Reason=None, ResponseData=None, PhysicalResourceId=None):",
              "  response_url = event.get('ResponseURL', \"\")",
              "  json_body = dumps({",
              "    'Status' : response_status,",
              "    'Reason' : Reason or 'See the details in CloudWatch Log Stream: ' + context.log_stream_name,",
              "    'PhysicalResourceId' :  PhysicalResourceId or context.log_stream_name,",
              "    'StackId' : event.get('StackId', \"\"),",
              "    'RequestId' : event.get('RequestId', \"\"),",
              "    'LogicalResourceId' : event.get('LogicalResourceId', \"\"),",
              "    'NoEcho' : True,",
              "    'Data' : ResponseData})",
              "  headers = {",
              "    'content-type' : '',",
              "    'content-length' : str(len(json_body))",
              "  }",
              "  try:",
              "    print json_body",
              "    response = requests.put(response_url,data=json_body,headers=headers)",
              "    print(\"Status code: \" + response.reason)",
              "  except Exception as e:",
              "    print(\"Failed to send response to CFN: error executing requests.put: \" + str(e))",
              "def get_physical_resource_id(s3_url):",
              "  m = sha512()",
              "  m.update(s3_url)",
              "  return m.hexdigest()",
              "def split(s3_url):",
              "  o = urlparse(s3_url)",
              "  if o.scheme != 's3' or not o.netloc or not o.path:",
              "      raise Exception(\"Invalid URL - parse failed\")",
              "  key = o.path",
              "  if key[0] == \"/\":",
              "    key = key[1:]",
              "  version = \"NoVersion\"",
              "  if o.query:",
              "    args = parse_qs(o.query)",
              "    version = args.get('version', [])",
              "    if len(version) != 1:",
              "      raise Exception(\"Invalid URL - bad args\")",
              "    version = version[0]",
              "  return {",
              "    \"S3Bucket\": o.netloc,",
              "    \"S3Key\": key,",
              "    \"S3ObjectVersion\": version",
              "  }",
              "def create_url_splitter(s3_url):",
              "  try:",
              "    data = split(s3_url)",
              "    return (True, data, \"Created Successfully\")",
              "  except Exception as e:",
              "    return (False, {}, \"Cannot create s3 url: \" + str(e))",
              "def update_url_splitter(s3_url):",
              "  try:",
              "    data = split(s3_url)",
              "    return (True, data, \"Updated Successfully\")",
              "  except Exception as e:",
              "    return (False, {}, \"Cannot update s3 url: \" + str(e))",
              "def delete_url_splitter(physical_id):",
              "  return (True, \"S3 Url with Id \" + physical_id + \" deleted\")",
              "def lambda_handler(event, context):",
              "  print event",
              "  req_type = event.get('RequestType', \"\")",
              "  s3_url = event.get('ResourceProperties', {}).get(\"S3Url\", \"\")",
              "  physical_resource_id = get_physical_resource_id(s3_url)",
              "  response_data = {}",
              "  if req_type == 'Create':",
              "    res, response_data, reason = create_url_splitter(s3_url)",
              "  elif req_type == 'Update':",
              "    res, response_data, reason = update_url_splitter(s3_url)",
              "  elif req_type == 'Delete':",
              "    physical_resource_id = event.get('PhysicalResourceId', \"\")",
              "    res, reason = delete_url_splitter(physical_resource_id)",
              "  else:",
              "    res = False",
              "    reason = \"Unknown operation: \" + req_type",
              "  status = \"FAILED\"",
              "  if res:",
              "    status = \"SUCCESS\"",
              "  send(event, context, status, Reason=reason, ResponseData=response_data, PhysicalResourceId=physical_resource_id)"
            ]
          ]
        },
        "Description": "Parses S3 URL into bucket, key and version",
        "Handler": "index.lambda_handler",
        "MemorySize": 128,
        "Role": { "Fn::GetAtt": [ "UrlSplitterLambdaRole", "Arn" ] },
        "Runtime": "python2.7",
        "Timeout": 60
      }
    },
    "UrlSplitterLambda": {
      "Properties": {
        "Code": { "Fn::GetAtt" : [ "S3UrlSplitterHasher", "Code" ] },
        "Description": { "Fn::GetAtt" : [ "S3UrlSplitterHasher", "Description" ] },
        "Handler": { "Fn::GetAtt" : [ "S3UrlSplitterHasher", "Handler" ] },
        "Layers" : { "Fn::GetAtt" : [ "S3UrlSplitterHasher", "Layers" ] },
        "MemorySize": { "Fn::GetAtt" : [ "S3UrlSplitterHasher", "MemorySize" ] },
        "Role": { "Fn::GetAtt" : [ "S3UrlSplitterHasher", "Role" ] },
        "Runtime": { "Fn::GetAtt" : [ "S3UrlSplitterHasher", "Runtime" ] },
        "Timeout": { "Fn::GetAtt" : [ "S3UrlSplitterHasher", "Timeout" ] },
        "TracingConfig": { "Fn::GetAtt" : [ "S3UrlSplitterHasher", "TracingConfig" ] }
      },
      "Type": "AWS::Lambda::Function"
    },
    "UrlSplitterLambdaVersionCreator" : {
      "Type" : "Custom::VersionCreator",
      "Properties" : {
        "ServiceToken": { "Fn::ImportValue" : { "Fn::Sub" : "${CRVersioningStackName}-VersionCreator" } },
        "LambdaHash": { "Fn::GetAtt" : [ "S3UrlSplitterHasher", "CodeHash" ] },
        "LambdaFunctionArn" : { "Fn::GetAtt" : [ "UrlSplitterLambda", "Arn" ] }
      }
    },
    "UrlSplitterLambdaRole" : {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns" : [ 
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole" 
        ],
        "Path" : "/"
      }
    },
    "UrlSplitterLogGroup" : {
      "Type" : "AWS::Logs::LogGroup",
      "Properties" : {
          "LogGroupName" : { "Fn::Sub" : "/aws/lambda/${UrlSplitterLambda}" },
          "RetentionInDays" : { "Ref" : "LoggingTTL" }
      }
    }
  },
  "Outputs": {
    "UrlSplitterLambdaVersion": {
      "Description": "Lambda Arn to use when splitting S3 URLs in Custom Resources",
      "Value": { "Fn::GetAtt": [ "UrlSplitterLambdaVersionCreator", "VersionArn" ] },
      "Export": { "Name" : { "Fn::Sub" : "${AWS::StackName}-S3UrlSplitter" } }
    }
  }
}